labs(x = "", y="percentage of gender")
# As the initial centroids are defined randomly,
# we define a seed for purposes of reprodutability
set.seed(123)
View(Mall.Customers)
View(Mall.Customers)
# A hook to wrap output based on a linewidth chunk option
# From https://github.com/yihui/knitr-examples/blob/master/077-wrap-output.Rmd
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
opts_chunk$set(cache=TRUE, autodep=TRUE, cache.comments=TRUE, linewidth=79)
devtools::install_github("csgillespie/efficientR")
# YOUR CODE GOES HERE
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
# YOUR CODE GOES HERE
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
devtools::install_github("csgillespie/efficientR")
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
# A hook to wrap output based on a linewidth chunk option
# From https://github.com/yihui/knitr-examples/blob/master/077-wrap-output.Rmd
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
opts_chunk$set(cache=TRUE, autodep=TRUE, cache.comments=TRUE, linewidth=79)
# YOUR CODE GOES HERE
# install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
# devtools::install_github("csgillespie/efficientR")
install.packages("BiocManager", dep = TRUE)
BiocManager::install(c("Rgraphviz","graph"))
install.packages("BiocManager", dep = TRUE)
BiocManager::install(c("Rgraphviz","graph"))
x <- 1:100 # initiate vector to cumulatively sum
# Method 1: with a for loop (10 lines)
cs_for <- function(x) {
for (i in x) {
if (i == 1) {
xc = x[i]
} else {
xc = c(xc, sum(x[1:i]))
}
}
xc
}
# Method 2: with apply (3 lines)
cs_apply <- function(x) {
sapply(x, function(x) sum(1:x))
}
# Method 3: cumsum (1 line)
cumsum(x)
library(microbenchmark)
microbenchmark(cs_for(x), cs_apply(x)) #Measured in Microseconds
microbenchmark(cs_for(x), cumsum(x))   #Measured in Nanoseconds
microbenchmark(cs_apply(x), cumsum(x)) #Measured in Nanoseconds
x <- 1:50000
benchmark <- microbenchmark(
cs_for(x),
cs_apply(x),
cumsum(x),
times = 1L
)
summary(benchmark)
library(profvis)
# Define the functions
concatenate_for <- function(strings) {
result <- ""
for (s in strings) {
result <- paste0(result, s)
}
result
}
concatenate_sapply <- function(strings) {
Reduce(paste0, strings)
}
# Prepare a vector of strings
strings <- rep("string", times = 10000)
# Profile the functions
profvis({
result_for <- concatenate_for(strings)
result_sapply <- concatenate_sapply(strings)
})
# Compute sample variance of numeric vector x
sampvar <- function(x) {
# Compute sum of vector x
my.sum <- function(x) {
sum <- 0
for (i in x) {
sum <- sum + i
}
sum
}
# Compute sum of squared variances of the elements of x from
# the mean mu
sq.var <- function(x, mu) {
sum <- 0
for (i in x) {
sum <- sum + (i - mu) ^ 2
}
sum
}
mu <- my.sum(x) / length(x)
sq <- sq.var(x, mu)
sq / (length(x) - 1)
}
x <- runif(1e8)
Rprof("Rprof.out", memory.profiling = TRUE)
y <- sampvar(x)
Rprof(NULL)
summary <- summaryRprof("Rprof.out")
print(summary)
library(proftools)
profile_data <- readProfileData("Rprof.out")
plotProfileCallGraph(profile_data)
system_info <- Sys.info()
operatingsystem_name <- system_info["sysname"]
#Info and name
print(system_info)
print(operatingsystem_name)
# Note: uses 2+ GB RAM and several seconds or more depending on hardware
# 1: Create large dataset
X <- as.data.frame(matrix(rnorm(1e9), nrow = 1e8))
# Note: uses 2+ GB RAM and several seconds or more depending on hardware
# 1: Create large dataset
X <- as.data.frame(matrix(rnorm(1e8), nrow = 1e8))
# 2: Find the median of each column using a single core
r1 <- lapply(X, median)
# 3: Find the median of each column using many cores
r2 <- parallel::mclapply(X, median)
N <- 100
random_pos <- function(N) {
int.max        <- .Machine$integer.max
return(sample(int.max, N, replace=TRUE))
}
N <- 100
x <- random_pos(N)
first_function <- function(x) {
x <- x + 1
return(x)  # Corrected placement of return statement
}
second_function <- function(x){
for (i in seq_len(N)) x[i] = x[i] + 1
return (x)
}
#Microbenchmark solo permite la comparacion de 2 funciones a la vez. Con un default de 100 evaluaciones hechas en ns.
microbenchmark(first_function(x), second_function(x))
microbenchmark(first(x), second(x))
random_pos <- function(N) {
int.max        <- .Machine$integer.max
return(sample(int.max, N, replace=TRUE))
}
N <- 100
x <- random_pos(N)
first <- function(x) {
x <- x + 1
return(x)  # Corrected placement of return statement
}
second <- function(x){
for (i in seq_len(N)) x[i] = x[i] + 1
return (x)
}
microbenchmark(first(x), second(x))
```{r, eval=FALSE}
monte_carlo = function(N) {
hits = 0
for (i in seq_len(N)) {
u1 = runif(1)
u2 = runif(1)
if (u1 ^ 2 > u2)
hits = hits + 1
}
return(hits / N)
}
```{r q3b}
monte_carlo_vec <- function(N){
u1 <- runif(N)
u2 <- runif(N)
hits <- sum(u1^2 > u2)
return (hits/N)
}
N <- 100
microbenchmark(monte_carlo_vec(N), monte_carlo(N))
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
library(memoise)
memoise_fib <- memoise(fib)
N <- 100
microbenchmark(memoise_fib(N), fib(N), times = 100L)
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
library(memoise)
memoise_fib <- memoise(fib)
N <- 100
microbenchmark(memoise_fib(N), fib(N), times = 100L)
N <- 1
microbenchmark(memoise_fib(N), fib(N), times = 100L)
N <- 25
microbenchmark(memoise_fib(N), fib(N), times = 100L)
N <- 1
microbenchmark(memoise_fib(N), fib(N), times = 100L)
library(memoise)
memoise_fib <- memoise(fib)
N <- 10
microbenchmark(memoise_fib(N), fib(N), times = 100L)
N <- 25
microbenchmark(memoise_fib(N), fib(N), times = 100L)
c_fib <- cmpfun(fib)
library(compiler)
c_fib <- cmpfun(fib)
m_fib <- memoise(fib)
microbenchmark(m_fib(N), fib(N), times = 100L)
microbenchmark(m_fib(N), fib(N), times = 100L)
microbenchmark(m_fib(N), fib(N), times = 100L)
devtools::install_github("csgillespie/efficientR")
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
install.packages(c("microbenchmark", "profvis", "devtools", "proftools"))
x <- 1:100
cs_for <- function(x) {
xc <- numeric(length(x))
for (i in seq_along(x)) {
xc[i] = sum(x[1:i])
}
xc
}
cs_apply <- function(x) {
sapply(x, function(i) sum(x[1:i]))
}
cs_cumsum <- function(x) cumsum(x)
microbenchmark(
cs_for(x),
cs_apply(x),
cs_cumsum(x),
times = 100L
)
library(microbenchmark)
library(microbenchmark)
x <- 1:100
cs_for <- function(x) {
xc <- numeric(length(x))
for (i in seq_along(x)) {
xc[i] = sum(x[1:i])
}
xc
}
cs_apply <- function(x) {
sapply(x, function(i) sum(x[1:i]))
}
cs_cumsum <- function(x) cumsum(x)
microbenchmark(
cs_for(x),
cs_apply(x),
cs_cumsum(x),
times = 100L
)
```{r q3f}
library(compiler)
c_fib <- cmpfun(fib)
N <- 25
microbenchmark(m_fib(N), fib(N),c_fib(N), times=100L)
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
m_fib <- memoise(fib)
library(microbenchmark)
library(ggplot2)
install.packages("ggplot2")
library(microbenchmark)
library(ggplot2)
library(ggplot2)
library(microbenchmark)
library(ggplot2)
library(microbenchmark)
library(memoise)
library(compiler)
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
m_fib <- memoise(fib)
c_fib <- cmpfun(fib)
cm_fib <- cmpfun(m_fib)
mc_fib <- memoise(c_fib)
library(microbenchmark)
library(memoise)
library(compiler)
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
m_fib <- memoise(fib)
c_fib <- cmpfun(fib)
cm_fib <- cmpfun(m_fib)
mc_fib <- memoise(c_fib)
results <- data.frame()
for (i in 1:25) {
benchmark <- microbenchmark(
fib = fib(i),
m_fib = m_fib(i),
c_fib = c_fib(i),
cm_fib = cm_fib(i),
mc_fib = mc_fib(i),
times = 5
)
# Extracting benchmarking results and adding position information
benchmark_res <- summary(benchmark)
benchmark_res$position <- rep(i, nrow(benchmark_res))
results <- rbind(results, benchmark_res)
}
# Preparing data for plotting
results$expr <- as.factor(results$expr)
results$position <- as.factor(results$position)
# Plotting
ggplot(results, aes(x = position, y = median, color = expr)) +
geom_point() +
geom_errorbar(aes(ymin = lq, ymax = uq), width = 0.2) +
labs(title = "Benchmarking Fibonacci Functions (1st to 25th Position)",
x = "Fibonacci Position",
y = "Time (microseconds)",
color = "Method") +
theme_minimal()
library(microbenchmark)
library(memoise)
library(compiler)
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
m_fib <- memoise(fib)
c_fib <- cmpfun(fib)
cm_fib <- cmpfun(m_fib)
mc_fib <- memoise(c_fib)
results <- data.frame()
for (i in 1:25) {
benchmark <- microbenchmark(
fib = fib(i),
m_fib = m_fib(i),
c_fib = c_fib(i),
cm_fib = cm_fib(i),
mc_fib = mc_fib(i),
times = 5
)
benchmark_res <- summary(benchmark)
benchmark_res$position <- rep(i, nrow(benchmark_res))
results <- rbind(results, benchmark_res)
}
# Preparing data for plotting
results$expr <- as.factor(results$expr)
results$position <- as.factor(results$position)
# Plotting
ggplot2(results, aes(x = position, y = median, color = expr)) +
geom_point() +
geom_errorbar(aes(ymin = lq, ymax = uq), width = 0.2) +
labs(title = "Benchmarking Fibonacci Functions (1st to 25th Position)",
x = "Fibonacci Position",
y = "Time (microseconds)",
color = "Method") +
theme_minimal()
library(microbenchmark)
library(memoise)
library(compiler)
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
m_fib <- memoise(fib)
c_fib <- cmpfun(fib)
cm_fib <- cmpfun(m_fib)
mc_fib <- memoise(c_fib)
results <- data.frame()
for (i in 1:25) {
benchmark <- microbenchmark(
fib = fib(i),
m_fib = m_fib(i),
c_fib = c_fib(i),
cm_fib = cm_fib(i),
mc_fib = mc_fib(i),
times = 5
)
benchmark_res <- summary(benchmark)
benchmark_res$position <- rep(i, nrow(benchmark_res))
results <- rbind(results, benchmark_res)
}
# Preparing data for plotting
results$expr <- as.factor(results$expr)
results$position <- as.factor(results$position)
# Plotting
ggplot(results, aes(x = position, y = median, color = expr)) +
geom_point() +
geom_errorbar(aes(ymin = lq, ymax = uq), width = 0.2) +
labs(title = "Benchmarking Fibonacci Functions (1st to 25th Position)",
x = "Fibonacci Position",
y = "Time (microseconds)",
color = "Method") +
theme_minimal()
library(ggplot)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
install.packages("ggplot2")
remove.packages("ggplot2", lib="~/R/win-library/4.1")
library(microbenchmark)
library(memoise)
library(ggplot2)
install.packages("ggplot2")
library(microbenchmark)
library(memoise)
library(ggplot2)
install.packages("ggplot2")
library(microbenchmark)
library(memoise)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(microbenchmark)
library(memoise)
library(ggplot2)
library(microbenchmark)
library(memoise)
library(compiler)
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
m_fib <- memoise(fib)
c_fib <- cmpfun(fib)
cm_fib <- cmpfun(m_fib)
mc_fib <- memoise(c_fib)
results <- data.frame()
for (i in 1:25) {
benchmark <- microbenchmark(
fib = fib(i),
m_fib = m_fib(i),
c_fib = c_fib(i),
cm_fib = cm_fib(i),
mc_fib = mc_fib(i),
times = 5
)
benchmark_res <- summary(benchmark)
benchmark_res$position <- rep(i, nrow(benchmark_res))
results <- rbind(results, benchmark_res)
}
# Preparing data for plotting
results$expr <- as.factor(results$expr)
results$position <- as.factor(results$position)
library(microbenchmark)
library(memoise)
library(compiler)
fib <- function(n)  {
if(n == 1 || n == 2) return(1)
fib(n-1) + fib(n-2)
}
m_fib <- memoise(fib)
c_fib <- cmpfun(fib)
cm_fib <- cmpfun(m_fib)
mc_fib <- memoise(c_fib)
results <- data.frame()
for (i in 1:25) {
benchmark <- microbenchmark(
fib = fib(i),
m_fib = m_fib(i),
c_fib = c_fib(i),
cm_fib = cm_fib(i),
mc_fib = mc_fib(i),
times = 5
)
benchmark_res <- summary(benchmark)
benchmark_res$position <- rep(i, nrow(benchmark_res))
results <- rbind(results, benchmark_res)
}
results$expr <- as.factor(results$expr)
results$position <- as.factor(results$position)
ggplot(results, aes(x = position, y = median, color = expr)) +
geom_point() +
geom_errorbar(aes(ymin = lq, ymax = uq), width = 0.2) +
labs(title = "Benchmarking Fibonacci Functions (1st to 25th Position)",
x = "Fibonacci Position",
y = "Time (microseconds)",
color = "Method") +
theme_minimal()
chooseCRANmirror(graphics=FALSE, ind=1) # select a mirror
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2", dependencies = TRUE)
